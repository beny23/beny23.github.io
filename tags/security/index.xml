<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>security on Tales about Software Engineering</title><link>https://beny23.github.io/tags/security/</link><description>Recent content in security on Tales about Software Engineering</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><copyright>Software Design Systems</copyright><lastBuildDate>Sun, 12 Mar 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://beny23.github.io/tags/security/index.xml" rel="self" type="application/rss+xml"/><item><title>Why AppSec fails</title><link>https://beny23.github.io/posts/why_appsec_fails/</link><pubDate>Sun, 12 Mar 2023 00:00:00 +0000</pubDate><guid>https://beny23.github.io/posts/why_appsec_fails/</guid><description>Let me tell you a story about Application Security (AppSec). It contains heroes and villains, and I&amp;rsquo;m not necessarily thinking about the defenders and attackers here. It contains lots of interesting technology that is often overemphasised. We&amp;rsquo;ve got whole industries that work on letting us know how scary it is out there, vulnerabilities that are marketed like rock stars and terminology that makes you quiver in your boots: who would want to fall victim to an Advanced Persistent Threat (APT)?</description></item><item><title>Precision Munitions for Denial of Service</title><link>https://beny23.github.io/posts/precision_munitions_for_denial_of_service/</link><pubDate>Mon, 30 Jan 2023 23:48:32 +0000</pubDate><guid>https://beny23.github.io/posts/precision_munitions_for_denial_of_service/</guid><description>There&amp;rsquo;s a metaphor about the fight between attackers and defenders in the Denial of Service cybersecurity game. It&amp;rsquo;s an &amp;ldquo;arms race&amp;rdquo; between ever bigger attacks throwing huge amounts of traffic at ever more sophisticated defenses (e.g. AWS shield).
Incidentally, I&amp;rsquo;ve just demonstrated an easy mistake: I&amp;rsquo;m not describing a Denial of Service (DoS) attack, it&amp;rsquo;s a Distributed Denial of Service (DDoS) attack. The aim is to overwhelm the infrastructure, either the networking infrastructure or the application by sending more requests than can be handled.</description></item><item><title>Curating Dependency Vulnerabilities</title><link>https://beny23.github.io/posts/curating_vulnerabilities/</link><pubDate>Mon, 04 Jul 2022 00:00:00 +0000</pubDate><guid>https://beny23.github.io/posts/curating_vulnerabilities/</guid><description>In this post, I am going to look at an increasingly important part of securing applications: Your supply chain. This includes every library, tool or service that you are using to build, run and monitor your service.
When the log4shell vulnerability hit, it wasn&amp;rsquo;t just a matter of looking at the dependencies that your source code pulls in, but also at the infrastructure you&amp;rsquo;re using and the build pipeline.
Have you had a look at the vulnerability reports of your dependencies lately?</description></item><item><title>On the weaponisation of open source</title><link>https://beny23.github.io/posts/on_weaponisation_of_open_source/</link><pubDate>Fri, 18 Mar 2022 14:30:32 +0000</pubDate><guid>https://beny23.github.io/posts/on_weaponisation_of_open_source/</guid><description>First of all I need the preface this article on how much I abhor the Russian invasion of Ukraine and I wholeheartedly support the sanctions. However, I think the conflict has spilled over into areas of software development that have got some unintended consequences attached.
As part of this post, I&amp;rsquo;m going to look at
the decision by MongoDB to cut off services in Russia the destructive change in a node library that deleted files on Russian IPs a change in code/licence in a community terraform module to assert that Putin is a dickhead MongoDB cutting off Russian customers MongoDB is a company and in order to comply with sanctions they have decided to cut off Russian customers.</description></item><item><title>Pwnkit: How to exploit and check</title><link>https://beny23.github.io/posts/pwnkit_how_to_check_and_exploit/</link><pubDate>Wed, 26 Jan 2022 21:34:35 +0000</pubDate><guid>https://beny23.github.io/posts/pwnkit_how_to_check_and_exploit/</guid><description>Pwnkit is a vulnerability that uses a bug in polkit to elevate permissions to root. This write-up shows how to reproduce it using Ubuntu and what to do to check whether a system is vulnerable.
What went wrong? Quoting from the original researchers:
This vulnerability is an attacker&amp;rsquo;s dream come true:
pkexec is installed by default on all major Linux distributions; pkexec is vulnerable since its creation, in May 2009; any unprivileged local user can exploit this vulnerability to obtain full root privileges; although this vulnerability is technically a memory corruption, it is exploitable instantly, reliably, in an architecture-independent way; and it is exploitable even if the polkit daemon itself is not running.</description></item><item><title>Exponential exploit: Why AppSec is hard</title><link>https://beny23.github.io/posts/one_plus_one_is_crash/</link><pubDate>Sun, 28 Feb 2021 01:50:10 +0000</pubDate><guid>https://beny23.github.io/posts/one_plus_one_is_crash/</guid><description>In this blog post, I would like to explore how missing input validation even in a trivial service can leave parts of server infrastructure crumbling.
In my opinion, this why securing applications (AppSec) is very difficult. Put supply chain attacks, unpatched systems and misconfiguring services to one side for a minute and consider that a lot of software is written by developers who do not necessarily consider all the edge cases or implications of what can go wrong even in the simplest of pieces of code (or just copy/paste from Stackoverflow).</description></item><item><title>Coerced to make Xerces think</title><link>https://beny23.github.io/posts/coerced_to_make_xerces_think/</link><pubDate>Fri, 03 Aug 2018 23:45:26 +0100</pubDate><guid>https://beny23.github.io/posts/coerced_to_make_xerces_think/</guid><description>More and more I&amp;rsquo;m thinking that XML is evil! This is the third part of my series on why, as a software engineer, it is very useful to think about the potentially dangerous combination of outdated libraries and XML.
I recently carried out a review of the dependency scanning results CVE-2012-0881:
Apache Xerces2 Java allows remote attackers to cause a denial of service (CPU consumption) via a crafted message to an XML service, which triggers hash table collisions.</description></item><item><title>How I learned to stop worrying and love a vulnerability</title><link>https://beny23.github.io/posts/how_i_learned_to_stop_worrying_and_love_a_vulnerability/</link><pubDate>Mon, 02 Jul 2018 10:22:14 +0100</pubDate><guid>https://beny23.github.io/posts/how_i_learned_to_stop_worrying_and_love_a_vulnerability/</guid><description>Security specialists. Arghhh! They&amp;rsquo;re all sitting in their &amp;lsquo;ivory tower&amp;rsquo; without anything better to do than to take a baseball bat to your hard work and tell you how you&amp;rsquo;ve not considered some obscure vulnerability CVE-142341231/4234 in a library that you didn&amp;rsquo;t even know existed. Not only that, there is definitely no way that you can deploy now, even when the product owner is breathing down your neck saying that nobody is going home until we&amp;rsquo;ve fixed this!</description></item><item><title>Hiding XXE in Spreadsheets</title><link>https://beny23.github.io/posts/hiding_xxe_in_spreadsheets/</link><pubDate>Fri, 08 Jun 2018 12:24:08 +0100</pubDate><guid>https://beny23.github.io/posts/hiding_xxe_in_spreadsheets/</guid><description>Recently I tried to poke holes in a service. I found myself laughing out loud. This was a vulnerability whereby modifying a SAML authentication while being rePOSTed via the browser allowed me to inject a malicious payload (see XML External Entity (XXE) Processing and XML External Entity (XXE) Prevention Cheat Sheet) that could be used to use up a service&amp;rsquo;s memory and CPU. Health checks and automatic service restarts would have healed the service but it still would have allowed an attacker to mount a Denial of Service attack without needing a lot of requests.</description></item><item><title>Laughing out loud - Malicious Reauthentication</title><link>https://beny23.github.io/posts/laughing_out_loud_malicious_auth/</link><pubDate>Mon, 04 Jun 2018 10:02:51 +0100</pubDate><guid>https://beny23.github.io/posts/laughing_out_loud_malicious_auth/</guid><description>Background I had found a vulnerability that made it is possible to insert maliciously crafted XML into the SAML payload that a reauthentication application returned to perform a Denial of Service (DoS) attack. The vulnerability came about due to the use of a out-of-date but still widely used library.
The service could have been made to consume a lot of CPU and memory causing it respond very slowly if at all.</description></item></channel></rss>