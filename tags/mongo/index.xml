<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>mongo on Tales about Software Engineering</title><link>https://beny23.github.io/tags/mongo/</link><description>Recent content in mongo on Tales about Software Engineering</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><copyright>Software Design Systems</copyright><lastBuildDate>Tue, 06 Jun 2023 21:32:00 +0000</lastBuildDate><atom:link href="https://beny23.github.io/tags/mongo/index.xml" rel="self" type="application/rss+xml"/><item><title>Functional programming in MongoDB</title><link>https://beny23.github.io/posts/functional_mongo_aggregation/</link><pubDate>Tue, 06 Jun 2023 21:32:00 +0000</pubDate><guid>https://beny23.github.io/posts/functional_mongo_aggregation/</guid><description>In this post I am looking at using the mongo aggregation pipeline in non-trivial ways. In fact, once I had done what I wanted to do I looked back at the result and discovered that a bit of an idea of functional programming helped me achieve what I wanted to do.
But back to the beginning: I was looking at deployment events which we&amp;rsquo;d captured in a mongo collection:
{ &amp;quot;environment&amp;quot; : &amp;quot;production&amp;quot;, &amp;quot;serviceName&amp;quot; : &amp;quot;platform-status-frontend&amp;quot;, &amp;quot;version&amp;quot; : &amp;quot;0.</description></item></channel></rss>