<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>appsec on Tales about Software Engineering</title><link>https://beny23.github.io/tags/appsec/</link><description>Recent content in appsec on Tales about Software Engineering</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><copyright>Software Design Systems</copyright><lastBuildDate>Thu, 23 Mar 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://beny23.github.io/tags/appsec/index.xml" rel="self" type="application/rss+xml"/><item><title>Harvesting Logs for Fun and Profit</title><link>https://beny23.github.io/posts/harvesting_logs_for_fun_and_profit/</link><pubDate>Thu, 23 Mar 2023 00:00:00 +0000</pubDate><guid>https://beny23.github.io/posts/harvesting_logs_for_fun_and_profit/</guid><description>From a security point of view, application logs are two-sided. On the one hand, it is really important to have good observability, to find out what is happening and what has happened. On the other hand, we don&amp;rsquo;t want to leak sensitive information. In this post I am going to look at the kinds of things you might find in your logs. The juicy bits are Personal Identifying Information (PII) or security credentials.</description></item><item><title>Why AppSec fails</title><link>https://beny23.github.io/posts/why_appsec_fails/</link><pubDate>Sun, 12 Mar 2023 00:00:00 +0000</pubDate><guid>https://beny23.github.io/posts/why_appsec_fails/</guid><description>Let me tell you a story about Application Security (AppSec). It contains heroes and villains, and I&amp;rsquo;m not necessarily thinking about the defenders and attackers here. It contains lots of interesting technology that is often overemphasised. We&amp;rsquo;ve got whole industries that work on letting us know how scary it is out there, vulnerabilities that are marketed like rock stars and terminology that makes you quiver in your boots: who would want to fall victim to an Advanced Persistent Threat (APT)?</description></item><item><title>Precision Munitions for Denial of Service</title><link>https://beny23.github.io/posts/precision_munitions_for_denial_of_service/</link><pubDate>Mon, 30 Jan 2023 23:48:32 +0000</pubDate><guid>https://beny23.github.io/posts/precision_munitions_for_denial_of_service/</guid><description>There&amp;rsquo;s a metaphor about the fight between attackers and defenders in the Denial of Service cybersecurity game. It&amp;rsquo;s an &amp;ldquo;arms race&amp;rdquo; between ever bigger attacks throwing huge amounts of traffic at ever more sophisticated defenses (e.g. AWS shield).
Incidentally, I&amp;rsquo;ve just demonstrated an easy mistake: I&amp;rsquo;m not describing a Denial of Service (DoS) attack, it&amp;rsquo;s a Distributed Denial of Service (DDoS) attack. The aim is to overwhelm the infrastructure, either the networking infrastructure or the application by sending more requests than can be handled.</description></item><item><title>Curating Dependency Vulnerabilities</title><link>https://beny23.github.io/posts/curating_vulnerabilities/</link><pubDate>Mon, 04 Jul 2022 00:00:00 +0000</pubDate><guid>https://beny23.github.io/posts/curating_vulnerabilities/</guid><description>In this post, I am going to look at an increasingly important part of securing applications: Your supply chain. This includes every library, tool or service that you are using to build, run and monitor your service.
When the log4shell vulnerability hit, it wasn&amp;rsquo;t just a matter of looking at the dependencies that your source code pulls in, but also at the infrastructure you&amp;rsquo;re using and the build pipeline.
Have you had a look at the vulnerability reports of your dependencies lately?</description></item></channel></rss>